# automatically generated by the FlatBuffers compiler, do not modify

# namespace: chatty_fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TransformerLayer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TransformerLayer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsTransformerLayer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # TransformerLayer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TransformerLayer
    def LayerIdx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # TransformerLayer
    def AttnLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.AttentionLayer import AttentionLayer
            obj = AttentionLayer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TransformerLayer
    def FfnLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.FFNLayer import FFNLayer
            obj = FFNLayer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TransformerLayerStart(builder):
    builder.StartObject(3)

def Start(builder):
    TransformerLayerStart(builder)

def TransformerLayerAddLayerIdx(builder, layerIdx):
    builder.PrependInt32Slot(0, layerIdx, 0)

def AddLayerIdx(builder, layerIdx):
    TransformerLayerAddLayerIdx(builder, layerIdx)

def TransformerLayerAddAttnLayer(builder, attnLayer):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(attnLayer), 0)

def AddAttnLayer(builder, attnLayer):
    TransformerLayerAddAttnLayer(builder, attnLayer)

def TransformerLayerAddFfnLayer(builder, ffnLayer):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ffnLayer), 0)

def AddFfnLayer(builder, ffnLayer):
    TransformerLayerAddFfnLayer(builder, ffnLayer)

def TransformerLayerEnd(builder):
    return builder.EndObject()

def End(builder):
    return TransformerLayerEnd(builder)

import chatty_fbs.AttentionLayer
import chatty_fbs.FFNLayer
try:
    from typing import Optional
except:
    pass

class TransformerLayerT(object):

    # TransformerLayerT
    def __init__(self):
        self.layerIdx = 0  # type: int
        self.attnLayer = None  # type: Optional[chatty_fbs.AttentionLayer.AttentionLayerT]
        self.ffnLayer = None  # type: Optional[chatty_fbs.FFNLayer.FFNLayerT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        transformerLayer = TransformerLayer()
        transformerLayer.Init(buf, pos)
        return cls.InitFromObj(transformerLayer)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, transformerLayer):
        x = TransformerLayerT()
        x._UnPack(transformerLayer)
        return x

    # TransformerLayerT
    def _UnPack(self, transformerLayer):
        if transformerLayer is None:
            return
        self.layerIdx = transformerLayer.LayerIdx()
        if transformerLayer.AttnLayer() is not None:
            self.attnLayer = chatty_fbs.AttentionLayer.AttentionLayerT.InitFromObj(transformerLayer.AttnLayer())
        if transformerLayer.FfnLayer() is not None:
            self.ffnLayer = chatty_fbs.FFNLayer.FFNLayerT.InitFromObj(transformerLayer.FfnLayer())

    # TransformerLayerT
    def Pack(self, builder):
        if self.attnLayer is not None:
            attnLayer = self.attnLayer.Pack(builder)
        if self.ffnLayer is not None:
            ffnLayer = self.ffnLayer.Pack(builder)
        TransformerLayerStart(builder)
        TransformerLayerAddLayerIdx(builder, self.layerIdx)
        if self.attnLayer is not None:
            TransformerLayerAddAttnLayer(builder, attnLayer)
        if self.ffnLayer is not None:
            TransformerLayerAddFfnLayer(builder, ffnLayer)
        transformerLayer = TransformerLayerEnd(builder)
        return transformerLayer
