# automatically generated by the FlatBuffers compiler, do not modify

# namespace: chatty_fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class FFNLayer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FFNLayer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsFFNLayer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # FFNLayer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FFNLayer
    def UpProj(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.LinearLayer import LinearLayer
            obj = LinearLayer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FFNLayer
    def DownProj(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.LinearLayer import LinearLayer
            obj = LinearLayer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FFNLayer
    def GateProj(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.LinearLayer import LinearLayer
            obj = LinearLayer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FFNLayer
    def Norm(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.Norm import Norm
            obj = Norm()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # FFNLayer
    def ActLayer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def FFNLayerStart(builder):
    builder.StartObject(5)

def Start(builder):
    FFNLayerStart(builder)

def FFNLayerAddUpProj(builder, upProj):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(upProj), 0)

def AddUpProj(builder, upProj):
    FFNLayerAddUpProj(builder, upProj)

def FFNLayerAddDownProj(builder, downProj):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(downProj), 0)

def AddDownProj(builder, downProj):
    FFNLayerAddDownProj(builder, downProj)

def FFNLayerAddGateProj(builder, gateProj):
    builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gateProj), 0)

def AddGateProj(builder, gateProj):
    FFNLayerAddGateProj(builder, gateProj)

def FFNLayerAddNorm(builder, norm):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(norm), 0)

def AddNorm(builder, norm):
    FFNLayerAddNorm(builder, norm)

def FFNLayerAddActLayer(builder, actLayer):
    builder.PrependInt8Slot(4, actLayer, 0)

def AddActLayer(builder, actLayer):
    FFNLayerAddActLayer(builder, actLayer)

def FFNLayerEnd(builder):
    return builder.EndObject()

def End(builder):
    return FFNLayerEnd(builder)

import chatty_fbs.LinearLayer
import chatty_fbs.Norm
try:
    from typing import Optional
except:
    pass

class FFNLayerT(object):

    # FFNLayerT
    def __init__(self):
        self.upProj = None  # type: Optional[chatty_fbs.LinearLayer.LinearLayerT]
        self.downProj = None  # type: Optional[chatty_fbs.LinearLayer.LinearLayerT]
        self.gateProj = None  # type: Optional[chatty_fbs.LinearLayer.LinearLayerT]
        self.norm = None  # type: Optional[chatty_fbs.Norm.NormT]
        self.actLayer = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        ffnlayer = FFNLayer()
        ffnlayer.Init(buf, pos)
        return cls.InitFromObj(ffnlayer)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, ffnlayer):
        x = FFNLayerT()
        x._UnPack(ffnlayer)
        return x

    # FFNLayerT
    def _UnPack(self, ffnlayer):
        if ffnlayer is None:
            return
        if ffnlayer.UpProj() is not None:
            self.upProj = chatty_fbs.LinearLayer.LinearLayerT.InitFromObj(ffnlayer.UpProj())
        if ffnlayer.DownProj() is not None:
            self.downProj = chatty_fbs.LinearLayer.LinearLayerT.InitFromObj(ffnlayer.DownProj())
        if ffnlayer.GateProj() is not None:
            self.gateProj = chatty_fbs.LinearLayer.LinearLayerT.InitFromObj(ffnlayer.GateProj())
        if ffnlayer.Norm() is not None:
            self.norm = chatty_fbs.Norm.NormT.InitFromObj(ffnlayer.Norm())
        self.actLayer = ffnlayer.ActLayer()

    # FFNLayerT
    def Pack(self, builder):
        if self.upProj is not None:
            upProj = self.upProj.Pack(builder)
        if self.downProj is not None:
            downProj = self.downProj.Pack(builder)
        if self.gateProj is not None:
            gateProj = self.gateProj.Pack(builder)
        if self.norm is not None:
            norm = self.norm.Pack(builder)
        FFNLayerStart(builder)
        if self.upProj is not None:
            FFNLayerAddUpProj(builder, upProj)
        if self.downProj is not None:
            FFNLayerAddDownProj(builder, downProj)
        if self.gateProj is not None:
            FFNLayerAddGateProj(builder, gateProj)
        if self.norm is not None:
            FFNLayerAddNorm(builder, norm)
        FFNLayerAddActLayer(builder, self.actLayer)
        ffnlayer = FFNLayerEnd(builder)
        return ffnlayer
