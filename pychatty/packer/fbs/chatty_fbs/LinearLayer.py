# automatically generated by the FlatBuffers compiler, do not modify

# namespace: chatty_fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class LinearLayer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LinearLayer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLinearLayer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # LinearLayer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LinearLayer
    def Weight(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearLayer
    def Bias(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.Tensor import Tensor
            obj = Tensor()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearLayer
    def ActBits(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # LinearLayer
    def ScaleX(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.ScaleInfo import ScaleInfo
            obj = ScaleInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # LinearLayer
    def ScaleO(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from chatty_fbs.ScaleInfo import ScaleInfo
            obj = ScaleInfo()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def LinearLayerStart(builder):
    builder.StartObject(5)

def Start(builder):
    LinearLayerStart(builder)

def LinearLayerAddWeight(builder, weight):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(weight), 0)

def AddWeight(builder, weight):
    LinearLayerAddWeight(builder, weight)

def LinearLayerAddBias(builder, bias):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(bias), 0)

def AddBias(builder, bias):
    LinearLayerAddBias(builder, bias)

def LinearLayerAddActBits(builder, actBits):
    builder.PrependInt8Slot(2, actBits, 0)

def AddActBits(builder, actBits):
    LinearLayerAddActBits(builder, actBits)

def LinearLayerAddScaleX(builder, scaleX):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(scaleX), 0)

def AddScaleX(builder, scaleX):
    LinearLayerAddScaleX(builder, scaleX)

def LinearLayerAddScaleO(builder, scaleO):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(scaleO), 0)

def AddScaleO(builder, scaleO):
    LinearLayerAddScaleO(builder, scaleO)

def LinearLayerEnd(builder):
    return builder.EndObject()

def End(builder):
    return LinearLayerEnd(builder)

import chatty_fbs.ScaleInfo
import chatty_fbs.Tensor
try:
    from typing import Optional
except:
    pass

class LinearLayerT(object):

    # LinearLayerT
    def __init__(self):
        self.weight = None  # type: Optional[chatty_fbs.Tensor.TensorT]
        self.bias = None  # type: Optional[chatty_fbs.Tensor.TensorT]
        self.actBits = 0  # type: int
        self.scaleX = None  # type: Optional[chatty_fbs.ScaleInfo.ScaleInfoT]
        self.scaleO = None  # type: Optional[chatty_fbs.ScaleInfo.ScaleInfoT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        linearLayer = LinearLayer()
        linearLayer.Init(buf, pos)
        return cls.InitFromObj(linearLayer)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, linearLayer):
        x = LinearLayerT()
        x._UnPack(linearLayer)
        return x

    # LinearLayerT
    def _UnPack(self, linearLayer):
        if linearLayer is None:
            return
        if linearLayer.Weight() is not None:
            self.weight = chatty_fbs.Tensor.TensorT.InitFromObj(linearLayer.Weight())
        if linearLayer.Bias() is not None:
            self.bias = chatty_fbs.Tensor.TensorT.InitFromObj(linearLayer.Bias())
        self.actBits = linearLayer.ActBits()
        if linearLayer.ScaleX() is not None:
            self.scaleX = chatty_fbs.ScaleInfo.ScaleInfoT.InitFromObj(linearLayer.ScaleX())
        if linearLayer.ScaleO() is not None:
            self.scaleO = chatty_fbs.ScaleInfo.ScaleInfoT.InitFromObj(linearLayer.ScaleO())

    # LinearLayerT
    def Pack(self, builder):
        if self.weight is not None:
            weight = self.weight.Pack(builder)
        if self.bias is not None:
            bias = self.bias.Pack(builder)
        if self.scaleX is not None:
            scaleX = self.scaleX.Pack(builder)
        if self.scaleO is not None:
            scaleO = self.scaleO.Pack(builder)
        LinearLayerStart(builder)
        if self.weight is not None:
            LinearLayerAddWeight(builder, weight)
        if self.bias is not None:
            LinearLayerAddBias(builder, bias)
        LinearLayerAddActBits(builder, self.actBits)
        if self.scaleX is not None:
            LinearLayerAddScaleX(builder, scaleX)
        if self.scaleO is not None:
            LinearLayerAddScaleO(builder, scaleO)
        linearLayer = LinearLayerEnd(builder)
        return linearLayer
