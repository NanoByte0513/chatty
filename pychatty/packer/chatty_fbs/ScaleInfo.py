# automatically generated by the FlatBuffers compiler, do not modify

# namespace: chatty_fbs

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class ScaleInfo(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ScaleInfo()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsScaleInfo(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # ScaleInfo
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ScaleInfo
    def Shape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # ScaleInfo
    def ShapeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # ScaleInfo
    def ShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ScaleInfo
    def ShapeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        return o == 0

    # ScaleInfo
    def Dtype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # ScaleInfo
    def Offset(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScaleInfo
    def DataSize(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # ScaleInfo
    def ZeroPoint(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def ScaleInfoStart(builder):
    builder.StartObject(5)

def Start(builder):
    ScaleInfoStart(builder)

def ScaleInfoAddShape(builder, shape):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(shape), 0)

def AddShape(builder, shape):
    ScaleInfoAddShape(builder, shape)

def ScaleInfoStartShapeVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartShapeVector(builder, numElems):
    return ScaleInfoStartShapeVector(builder, numElems)

def ScaleInfoAddDtype(builder, dtype):
    builder.PrependInt8Slot(1, dtype, 0)

def AddDtype(builder, dtype):
    ScaleInfoAddDtype(builder, dtype)

def ScaleInfoAddOffset(builder, offset):
    builder.PrependInt64Slot(2, offset, 0)

def AddOffset(builder, offset):
    ScaleInfoAddOffset(builder, offset)

def ScaleInfoAddDataSize(builder, dataSize):
    builder.PrependInt64Slot(3, dataSize, 0)

def AddDataSize(builder, dataSize):
    ScaleInfoAddDataSize(builder, dataSize)

def ScaleInfoAddZeroPoint(builder, zeroPoint):
    builder.PrependInt32Slot(4, zeroPoint, 0)

def AddZeroPoint(builder, zeroPoint):
    ScaleInfoAddZeroPoint(builder, zeroPoint)

def ScaleInfoEnd(builder):
    return builder.EndObject()

def End(builder):
    return ScaleInfoEnd(builder)

try:
    from typing import List
except:
    pass

class ScaleInfoT(object):

    # ScaleInfoT
    def __init__(self):
        self.shape = None  # type: List[int]
        self.dtype = 0  # type: int
        self.offset = 0  # type: int
        self.dataSize = 0  # type: int
        self.zeroPoint = 0  # type: int

    @classmethod
    def InitFromBuf(cls, buf, pos):
        scaleInfo = ScaleInfo()
        scaleInfo.Init(buf, pos)
        return cls.InitFromObj(scaleInfo)

    @classmethod
    def InitFromPackedBuf(cls, buf, pos=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, pos)
        return cls.InitFromBuf(buf, pos+n)

    @classmethod
    def InitFromObj(cls, scaleInfo):
        x = ScaleInfoT()
        x._UnPack(scaleInfo)
        return x

    # ScaleInfoT
    def _UnPack(self, scaleInfo):
        if scaleInfo is None:
            return
        if not scaleInfo.ShapeIsNone():
            if np is None:
                self.shape = []
                for i in range(scaleInfo.ShapeLength()):
                    self.shape.append(scaleInfo.Shape(i))
            else:
                self.shape = scaleInfo.ShapeAsNumpy()
        self.dtype = scaleInfo.Dtype()
        self.offset = scaleInfo.Offset()
        self.dataSize = scaleInfo.DataSize()
        self.zeroPoint = scaleInfo.ZeroPoint()

    # ScaleInfoT
    def Pack(self, builder):
        if self.shape is not None:
            if np is not None and type(self.shape) is np.ndarray:
                shape = builder.CreateNumpyVector(self.shape)
            else:
                ScaleInfoStartShapeVector(builder, len(self.shape))
                for i in reversed(range(len(self.shape))):
                    builder.PrependInt32(self.shape[i])
                shape = builder.EndVector()
        ScaleInfoStart(builder)
        if self.shape is not None:
            ScaleInfoAddShape(builder, shape)
        ScaleInfoAddDtype(builder, self.dtype)
        ScaleInfoAddOffset(builder, self.offset)
        ScaleInfoAddDataSize(builder, self.dataSize)
        ScaleInfoAddZeroPoint(builder, self.zeroPoint)
        scaleInfo = ScaleInfoEnd(builder)
        return scaleInfo
